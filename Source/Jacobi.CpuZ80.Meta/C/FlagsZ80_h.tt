<#+

    public sealed class FlagsZ80_h : Template
    {
        private readonly IEnumerable<string> _flags;

        public FlagsZ80_h(IEnumerable<InstructionMeta> decls)
        {
            _flags = ToFlagOperations(decls);
        }

        public override string TransformText()
        {
#>
/**
 *  Generated Source Code
 *  Any changes you make will be lost when the code is regenerated.
 */

#include "InstructionInfo.h"

#ifdef __cplusplus
extern "C" {
#endif

// Flag operations for the Z80:
<#+
            foreach (var flag in _flags)
            {
#>
extern void AssignFlags_<#= flag #>();
<#+        
            }
#>

#ifdef __cplusplus
}
#endif

<#+
            return this.GenerationEnvironment.ToString();
        }

        private IEnumerable<string> ToFlagOperations(IEnumerable<InstructionMeta> decls)
        {
            var builder = new FlagsBuilder();

            foreach(var decl in decls)
            {
                builder.CreateFlagsFor(decl.Info);
            }

            return builder.GetUniqueFlagSets().Select(fm => fm.Name);
        }
    }
#>
