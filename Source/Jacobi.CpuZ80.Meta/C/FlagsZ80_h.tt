<#+

    public sealed class FlagsZ80_h : Template
    {
        private readonly IEnumerable<FlagMeta> _flags;

        public FlagsZ80_h(IEnumerable<InstructionMeta> decls)
        {
            _flags = ToFlagMeta(decls);
        }

        public override string TransformText()
        {
#>
/**
 *  Generated Source Code
 *  Any changes you make will be lost when the code is regenerated.
 */

 #include "CpuZ80.h"


#ifdef __cplusplus
extern "C" {
#endif

// Flag operations for the Z80:
<#+
            foreach (var flag in _flags.Select(fm => fm.Name))
            {
#>
extern void AssignFlags_<#= flag #>();
<#+        
            }
#>

// Operations that fetch flag values:
<#+
            foreach (var ops in ToFlagOperations(_flags))
            {
#>
extern bool_t <#= ops #>();
<#+        
            }
#>


#ifdef __cplusplus
}
#endif

<#+
            return this.GenerationEnvironment.ToString();
        }

        private IEnumerable<FlagMeta> ToFlagMeta(IEnumerable<InstructionMeta> decls)
        {
            var builder = new FlagsBuilder();

            foreach(var decl in decls)
            {
                builder.CreateFlagsFor(decl.Info);
            }

            return builder.GetUniqueFlagSets();
        }

        private IEnumerable<string> ToFlagOperations(IEnumerable<FlagMeta> flags)
        {
            var ops = new List<string>();

            foreach(var f in flags)
            {
                foreach(var o in f.Operations)
                {
                    if (!ops.Contains(o.Value))
                    {
                    ops.Add(o.Value);
                    }
                }
            }

            ops.Sort();
            return ops;
        }
    }
#>
