<#@ template language="C#" debug="True" hostspecific="True" #>
<#@ output extension="txt" #>
<#@ include file="T4Toolbox.tt" #>
<#@ include file="FlagsZ80_h.tt" #>
<#@ include file="FlagsZ80_c.tt" #>
<#@ include file="FunctionsZ80_h.tt" #>
<#@ include file="InstructionsZ80_h.tt" #>
<#@ include file="InstructionsZ80_c.tt" #>
<#@ include file="InstructionTablesZ80_c.tt" #>
<#@ Assembly Name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ assembly name="EnvDTE" #>
<#@ assembly name="$(TargetDir)\Jacobi.CpuZ80.Meta.dll" #>
<#@ import namespace="Jacobi.CpuZ80.Meta" #>
<#
    // Using https://github.com/olegsych/T4Toolbox
    // For VS2019: https://github.com/peterM/T4Toolbox
    // https://marketplace.visualstudio.com/items?itemName=OlegVSych.T4ToolboxforVisualStudio2017

    const string TargetProjectPath = @"..\..\Jacobi.CpuZ80\Jacobi.CpuZ80.vcxproj";

    var filePath = Path.Combine(GetSolutionDirectory(), "Jacobi.CpuZ80.Meta", "InstructionsZ80.json");
    var setInfo = InstructionSetInfo.FromJsonFile(filePath);

    var decls = new List<InstructionMeta>();
    var expander = new InstructionExpander(TableInfo.ToList(setInfo.Tables));
    foreach (var instruction in setInfo.Instructions)
    {
        expander.Expand(decls, new InstructionMeta(instruction));
    }

#>
Generating code for <#= decls.Count #> Z80 instructions.

Generating 'InstructionsZ80.h'...
<#

    var hpp = new InstructionsZ80_h(decls);
    hpp.Output.File = "InstructionsZ80.h";
    hpp.Output.Project = TargetProjectPath;
    hpp.Render();

#>
Done.

Generating 'InstructionsZ80.c'...
<#

    var cpp = new InstructionsZ80_c(decls);
    cpp.Output.File = "InstructionsZ80.c";
    cpp.Output.Project = TargetProjectPath;
    cpp.Render();

#>
Done.

Generating 'InstructionTablesZ80.c'...
<#

    var tables = new InstructionTablesZ80_c(decls);
    tables.Output.File = "InstructionTablesZ80.c";
    tables.Output.Project = TargetProjectPath;
    tables.Render();

#>
Done.

Generating 'FunctionsZ80.h'...
<#

    var funcs = new FunctionsZ80_h(decls);
    funcs.Output.File = "FunctionsZ80.h";
    funcs.Output.Project = TargetProjectPath;
    funcs.Render();

#>
Done.

Generating 'FlagsZ80.h'...
<#

    var flags = new FlagsZ80_h(decls);
    flags.Output.File = "FlagsZ80.h";
    flags.Output.Project = TargetProjectPath;
    flags.Render();

#>
Done.

Generating 'FlagsZ80.c'...
<#

    var flags_c = new FlagsZ80_c(decls);
    flags_c.Output.File = "FlagsZ80.c";
    flags_c.Output.Project = TargetProjectPath;
    flags_c.Render();

#>
Done.

All Finished.

<#+
public string GetSolutionDirectory()
{
    var serviceProvider = this.Host as IServiceProvider;
    var dte = serviceProvider.GetService(typeof(EnvDTE.DTE)) as EnvDTE.DTE;
    return System.IO.Path.GetDirectoryName(dte.Solution.FullName);
}
#>