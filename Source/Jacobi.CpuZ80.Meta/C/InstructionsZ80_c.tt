<#+

    public sealed class InstructionsZ80_c : Template
    {
        private readonly IEnumerable<InstructionMeta> _decls;

        public InstructionsZ80_c(IEnumerable<InstructionMeta> decls)
        {
            _decls = decls;
        }

        public override string TransformText()
        {
#>
/**
 *  Generated Source Code
 *  Any changes you make will be lost when the code is regenerated.
 */

#include "InstructionsZ80.h"
#include "FunctionsZ80.h"
#include "FlagsZ80.h"

// Instructions for the Z80:
<#+
            var names = new List<string>();
            foreach (var decl in _decls)
            {
                if (names.Contains(decl.Name)) { continue; }
                names.Add(decl.Name);
#>

// <#= decl.Info.Mnemonic #>   -  <#= decl.Name #>  -  <#= String.Join(", ", decl.Info.Bytes) #>
const InstructionInfo instructionInfo<#= decl.Name #> =
{
    {
<#+
                foreach(var mc in decl.MachineCycles)
                {
                    if (mc.ExtraCycles > 0)
                    {
                        if (!mc.IsExt && decl.Root.Variables.Any())
                        {
#>
        { <#= mc.TCycles #>, OnClock_<#= decl.Root.Name #>_<#= mc.Operation #> },
<#+                     }
                        else
                        {
#>
        { <#= mc.TCycles #>, OnClock_<#= decl.Name #>_<#= mc.Operation #> },
<#+                     }
                    } 
                    else if (!mc.IsExt && decl.Root.Parameters.Any() && mc.Operation != "ODd")
                    {
#>
        { <#= mc.TCycles #>, OnClock_<#= decl.Root.Name #>_<#= mc.Operation #> },
<#+                 }
                    else
                    { 
#>
        { <#= mc.TCycles #>, OnClock_<#= mc.Operation #> },
<#+                 }
                }
                
                for(int i = decl.MachineCycles.Count(); i < 6; i++)
                {   
#>
        { 0, nullptr },
<#+             }
#>
    },
    {
        <#=  BuildInstructionVariable(decl, 0) #>
        <#=  BuildInstructionVariable(decl, 1) #>
    },
    <#=  BuildFlagOperation(decl) #>
};
<#+
            }
#>

<#+
            return this.GenerationEnvironment.ToString();
        }

        private static string BuildInstructionVariable(InstructionMeta decl, int index)
        {
            var variable = decl.Variables
                .Where(v => v.Type != InstructionVariableType.OpcodeByte && v.Type != InstructionVariableType.None)
                .Skip(index)
                .FirstOrDefault();

            if (variable != null)
            {
                return "{ Type_" + variable.Type.ToString() + ", {" + variable.Value + "} },";
            }

            return "{ Type_None, {0} },";
        }

        private static string BuildFlagOperation(InstructionMeta decl)
        {
            var builder = new FlagsBuilder();
            var metaFlag = builder.CreateFlagsFor(decl.Info);
            if (metaFlag != null)
            {
                return "AssignFlags_" + metaFlag.Name;
            }
            return "nullptr";
        }
    }
#>
