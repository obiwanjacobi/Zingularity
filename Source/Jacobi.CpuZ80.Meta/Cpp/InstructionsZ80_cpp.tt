<#+

    public sealed class InstructionsZ80_cpp : Template
    {
        private readonly IEnumerable<InstructionMeta> _decls;

        public InstructionsZ80_cpp(IEnumerable<InstructionMeta> decls)
        {
            _decls = decls;
        }

        public override string TransformText()
        {
#>
/**
 *  Generated Source Code
 *  Any changes you make will be lost when the code is regenerated.
 */

#include "stdafx.h"
#include "InstructionsZ80.hpp"
#include "FunctionsZ80.hpp"

// Instructions for the Z80:
<#+
            foreach (var decl in _decls)
            {
#>

// <#= decl.Info.Mnemonic #>  -  <#= String.Join(", ", decl.Info.Bytes) #>
InstructionInfo instructionInfo<#= decl.Name #> =
{
    <#= decl.Info.Cycles.Count #>,
    <#= decl.Info.AltCycles.Count #>,
    {
<#+
                foreach(var mc in decl.MachineCycles)
                {  
                    if (mc.ExtraCycles > 0)
                    {
#>
        { <#= mc.TCycles #>, OnClock_<#= decl.Name #>_<#= mc.Operation #> },
<#+
                    } 
                    else if (!mc.IsExt && decl.Root.Parameters.Any())
                    {
#>
        { <#= mc.TCycles #>, OnClock_<#= decl.Root.Name #>_<#= mc.Operation #> },
<#+                 }
                    else
                    { 
#>
        { <#= mc.TCycles #>, OnClock_<#= mc.Operation #> },
<#+                 }
                }
                
                for(int i = decl.MachineCycles.Count(); i < 6; i++)
                {   
#>
        { 0, nullptr },
<#+             }
#>
    }
};
<#+        
            }
#>

<#+
            return this.GenerationEnvironment.ToString();
        }
    }
#>
