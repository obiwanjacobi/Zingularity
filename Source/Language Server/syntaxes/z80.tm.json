{
	"scopeName": "source.z80asm",
	"name": "Z80 Assembler",
	"patterns": [
		{ "include": "#comment" },
		{ "include": "#mnemonic-lower" },
		{ "include": "#mnemonic-upper" },
		{ "include": "#condition-lower" },
		{ "include": "#condition-upper" },
		{ "include": "#reg-lower" },
		{ "include": "#reg-upper" },
		{ "include": "#directive-lower" },
		{ "include": "#directive-upper" },
		{ "include": "#label" },
		{ "include": "#identifier" },
		{ "include": "#operator" },
		{ "include": "#dec" },
		{ "include": "#hex" }
	],
	"repository": {
		"comment": { "name": "comment.line", "match": ";.*$" },
		"mnemonic-lower": { "name": "keyword.other.mnemonic", "match": "\\b(ld|ldi|ldir|ldd|lddr|push|pop|ex|exx|add|adc|sub|sbc|and|or|xor|cp|cpd|cpdr|cpi|cpir|inc|dec|daa|neg|cpl|rlca|rla|rrca|rra|rlc|rl|rld|rrc|rr|rrd|sla|sra|srl|bit|res|set|ccf|scf|nop|halt|di|ei|jp|jr|djnz|call|ret|reti|retn|rst|im|in|ini|inir|ind|indr|out|outi|otir|outd|otdr)\\b" },
		"mnemonic-upper": { "name": "keyword.other.mnemonic", "match": "\\b(LD|LDI|LDIR|LDD|LDDR|PUSH|POP|EX|EXX|ADD|ADC|SUB|SBC|AND|OR|XOR|CP|CPD|CPDR|CPI|CPIR|INC|DEC|DAA|NEG|CPL|RLCA|RLA|RRCA|RRA|RLC|RL|RLD|RRC|RR|RRD|SLA|SRA|SRL|BIT|RES|SET|CCF|SCF|NOP|HALT|DI|EI|JP|JR|DJNZ|CALL|RET|RETI|RETN|RST|IM|IN|INI|INIR|IND|INDR|OUT|OUTI|OTIR|OUTD|OTDR)\\b" },
		"condition-lower": { "name": "support.other.z80", "match": "\\b(c|m|nc|nz|p|pe|po|z)\\b," },
		"condition-upper": { "name": "support.other.z80", "match": "\\b(C|M|NC|NZ|P|PE|PO|Z)\\b," },
		"reg-lower": { "name": "support.class.z80", "match": "\\b(a|b|c|d|e|h|l|af|bc|de|hl|ix|iy|sp)\\b" },
		"reg-upper": { "name": "support.class.z80", "match": "\\b(A|B|C|D|E|H|L|AF|BC|DE|HL|IX|IY|SP)\\b" },
		"directive-lower": { "name": "keyword.control.directive", "match": "\\b(macro|endm|if|endc|rept|endr|db|dw|ds|include|incbin|section|equ)\\b" },
		"directive-upper": { "name": "keyword.control.directive", "match": "\\b(MACRO|ENDM|IF|ENDC|REPT|ENDR|DB|DW|DS|INCLUDE|INCBIN|SECTION|EQU)\\b" },
		"label": { "name": "entity.name.tag.z80", "match": "^\\s*(\\.?[a-zA-Z_][a-zA-Z_0-9\\@]*)\\s*(\\:)\\s*$" },
		"identifier": { "name": "meta.identifier.z80", "match": "\\b([a-zA-Z_][a-zA-Z_0-9\\@]*)\\b" },
		"operator": { "name": "keyword.operator.z80", "match": "\\+|-|\\*|\\/" },
		"dec": { "name": "constant.numeric", "match": "\\b[0-9]+\\b" },
		"hex": { "name": "constant.numeric.hex", "match": "\\$[0-9a-fA-F]+\\b|[0-9a-fA-F]+h" }
	}
}